<html class="h-full bg-bluey-800">
<%- include('../components/head') %>
<body style="font-family: 'Whitney', sans-serif;" class="bg-bluey-800 h-full">

<div>
  <%- include('../components/navigation') %>
  <main>
    <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
<% if (req.query.success == "CREATED") { %>
<div class="rounded-md bg-green-800 p-4 mb-8">
  <div class="flex">
    <div class="flex-shrink-0">
      <!-- Heroicon name: solid/information-circle -->
      <svg class="h-5 w-5 text-green-300" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
      </svg>
    </div>
    <div class="ml-3 flex-1 md:flex md:justify-between">
      <p class="text-sm text-green-400">The server has successfully been created.</p>
    </div>
  </div>
</div>
<% } %>
<% if (req.query.success == "MODIFIED") { %>
<div class="rounded-md bg-green-800 p-4 mb-8">
  <div class="flex">
    <div class="flex-shrink-0">
      <!-- Heroicon name: solid/information-circle -->
      <svg class="h-5 w-5 text-green-300" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
      </svg>
    </div>
    <div class="ml-3 flex-1 md:flex md:justify-between">
      <p class="text-sm text-green-400">The server has successfully been modified. The changes will appear on the Panel in a few seconds.</p>
    </div>
  </div>
</div>
<% } %>
<div>


        <%
            let ram = 0;
            let disk = 0;
            let cpu = 0;
            let servers = pterodactyl.relationships.servers.data.length;
            for (let i = 0, len = pterodactyl.relationships.servers.data.length; i < len; i++) {
                ram = ram + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.memory == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.memory : 0);
                disk = disk + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.disk == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.disk : 0);
                cpu = cpu + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.cpu == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.cpu : 0);
            }
        %>

  <dl class="mt-5 grid grid-cols-1 rounded-lg bg-bluey-700 mb-8 overflow-hidden shadow divide-y divide-bluey-600 md:grid-cols-3 md:divide-y-0 md:divide-x">
    <div class="px-4 py-5 sm:p-6">
      <dt class="text-base font-normal text-bluey-400">RAM (GB)</dt>
      <dd class="mt-1 flex justify-between items-baseline md:block lg:flex">
        <div class="flex items-baseline text-2xl font-medium text-blue-300">
          <%= (packages ? packages.ram : 0)/1024 + extraresources.ram/1024 - ram/1024 %>GB
        </div>
      </dd>
    </div>

    <div class="px-4 py-5 sm:p-6">
      <dt class="text-base font-normal text-bluey-400">CPU Threads (%)</dt>
      <dd class="mt-1 flex justify-between items-baseline md:block lg:flex">
        <div class="flex items-baseline text-2xl font-medium text-blue-300">
          <%= (packages ? packages.cpu : 0) + extraresources.cpu - cpu %>%
        </div>
      </dd>
    </div>

    <div class="px-4 py-5 sm:p-6">
      <dt class="text-base font-normal text-bluey-400">Disk (GB)</dt>
      <dd class="mt-1 flex justify-between items-baseline md:block lg:flex">
        <div class="flex items-baseline text-2xl font-medium text-blue-300">
          <%= (packages ? packages.disk : 0)/1024 + extraresources.disk/1024 - disk/1024 %>GB
        </div>
      </dd>
    </div>
  </dl>
</div>
      <div class="transition ease-in-out delay-100 overflow-hidden bg-bluey-700 shadow sm:rounded-tr-lg sm:rounded-tl-lg border-transparent border-dashed border-2">
        <br>
      </div>
      <% if (pterodactyl.relationships.servers.data.length == 0 && (!queued || !queued[0])) { %>
        <p class="text-white w-full text-sm bg-bluey-700 pl-8">You don't have any active servers yet. <a href="/cp/servers/new" class="text-blue-200 hover:text-blue-300 transition">Would you like to create one?</a></p>
      <% } %>
      <% for (let i = 0, len = pterodactyl.relationships.servers.data.length; i < len; i++) { %>
      <div onclick="location.href='/cp/servers/edit?id=<%= pterodactyl.relationships.servers.data[i].attributes.id %>'" class="transition ease-in-out delay-100 overflow-hidden bg-bluey-700 shadow cursor-pointer border-transparent border-dashed border-2 hover:border-bluey-600">
        <div class="px-4 py-5 sm:px-6">
          <h3 class="text-lg font-medium leading-6 text-white"><%= pterodactyl.relationships.servers.data[i].attributes.name.length > 15 ? pterodactyl.relationships.servers.data[i].attributes.name.slice(0, 12) + "..." : pterodactyl.relationships.servers.data[i].attributes.name %></h3>
          <p class="mt-1 mb-4 max-w-2xl text-sm text-bluey-300">
          <% if (!pterodactyl.relationships.servers.data[i].attributes.description) { %>
            No description has been set.
          <% } else { %>
            <%= pterodactyl.relationships.servers.data[i].attributes.description %>
          <% } %>
          </p>
          <span class="bg-bluey-600 text-bluey-100 text-xs font-medium mr-2 px-2.5 py-0.5 rounded"><%= pterodactyl.relationships.servers.data[i].attributes.limits.memory/1024 %>GB RAM</span> <span class="bg-bluey-600 text-bluey-100 text-xs font-medium mr-2 px-2.5 py-0.5 rounded"><%= pterodactyl.relationships.servers.data[i].attributes.limits.cpu %>% CPU</span> <span class="bg-bluey-600 text-bluey-100 text-xs font-medium mr-2 px-2.5 py-0.5 rounded"><%= pterodactyl.relationships.servers.data[i].attributes.limits.disk/1024 %>GB Disk</span>
        </div>
      </div>
      <% } %>
                  <%
                  function getRelativeTime(isoTimestamp) {
                     const now = new Date();
                     const timestamp = new Date(isoTimestamp);
                     const diff = timestamp - now;
                     
                     // If the time is in the past
                     if (diff < 0) {
                       return 'Unknown';
                     }
                   
                     const seconds = Math.floor(diff / 1000);
                     const minutes = Math.floor(seconds / 60);
                     const hours = Math.floor(minutes / 60);
                     const days = Math.floor(hours / 24);
                   
                     if (days > 0) {
                       return `in ${days} day${days !== 1 ? 's' : ''}`;
                     } else if (hours > 0) {
                       return `in ${hours} hour${hours !== 1 ? 's' : ''}`;
                     } else if (minutes > 0) {
                       return `in ${minutes} minute${minutes !== 1 ? 's' : ''}`;
                     } else {
                       return `in ${seconds} second${seconds !== 1 ? 's' : ''}`;
                     }
                   }
                   
                   function getEstimatedTime(position) {
                     const totalMinutes = position * 1.85;
                     const hours = Math.floor(totalMinutes / 60);
                     const minutes = Math.floor(totalMinutes % 60);
                     const seconds = Math.round((totalMinutes % 1) * 60);
                     
                     let result = '';
                     if (hours > 0) {
                       result += `${hours} hour${hours !== 1 ? 's' : ''}, `;
                     }
                     if (minutes > 0) {
                       result += `${minutes} minute${minutes !== 1 ? 's' : ''}, `;
                     }
                     result += `${seconds} second${seconds !== 1 ? 's' : ''}`;
                     
                     return result.trim();
                   }
                  %>
      <% if (queued) { %>
        <% queued.forEach(function (queued) { %>
          <div class="transition ease-in-out delay-100 overflow-hidden bg-bluey-700 shadow border-transparent">
            <div class="px-4 py-5 sm:px-6">
              <h3 class="text-lg font-medium leading-6 text-white"><%= queued.name %> <span class="text-bluey-400 ml-2 text-xs rounded bg-white/5 px-4 py-2">Awaiting deployment... <a class="text-red-300 hover:text-red-400 transition" href="/cp/queue-remove/<%= queued.queuePosition %>">Cancel</a></span></h3>
              <p class="mt-4 max-w-2xl text-sm text-yellow-400">
                No Available Capacity, In Queue (pos. <%= queued.queuePosition %>) ― ETA: <%= getEstimatedTime(queued.queuePosition) %> ― Next attempt: <%= getRelativeTime(queued.queueNextAttempt) %>
              </p>
            </div>
          </div>
          <% }); %>
      <% } %>
      <div class="transition ease-in-out delay-100 overflow-hidden bg-bluey-700 shadow border-transparent border-dashed border-2 rounded-bl-lg rounded-br-lg">
        <br>
      </div>
      <!-- /End replace -->
    </div>
  </main>
</div>